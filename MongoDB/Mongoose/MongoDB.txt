C.R.U.D - Create Read Update Delete

1. Inserting Data in MongoDB 

show dbs // shows all the existing database

use mechanificial // new database gets created and if it already exists then will be used, you can name your database anything, here the name is mechanificial

db.items.insertOne({name: "Shark A Phone", price: 1000, camera: "thermal", display: "paper", processor: "UltraShark"})

db.items.insertMany([{name: "Shark A Phone", price: 1000, camera: "thermal", display: "paper", processor: "UltraShark"}, {name: "Shark Z Phone", price: 1500, camera: "thermalX", display: "paperLan", processor: "QuantaShark"}])

db.items.find()

2. Searching/Querying data from the MongoDB

use mechanificial

show collections // here " items " is the name of one of the collections of the database and again the name of the collection can also be anything

db.items.find()

db.items.find({price: 1500})

db.items.find({price: 1000, display: "paper"})

db.items.find({ $or:[{price: 1500}, {processor: "UltraShark"}] })

db.items.find({price: {$gte: 1000}})

db.items.find({price: {$gt: 1000}})

db.items.find({price: 1000}, {price: 1})

3. Deleting data from the MongoDB

show dbs

use mechanificial

show collections

db.items.find() //to see all the docs.

db.items.find({price: 1000})

db.items.deleteOne({price: 1000}) //deletes the first entry of the similar kind

db.items.deleteMany({price: {$gte: 1000}})

4. Updating data from the MongoDB

show dbs

use mechanificial

show collections

db.items2.insertOne({a: 69}) // creating new collection

show collections

db.items2.find()

db.items.find()

db.items.updateOne({"name" : "Shark Z Phone"}, {$set: {"price" : 3500}})

5. Establishing connection between MongoDB and NodeJS

run " npm install mongoose " or  " npm i mongoose " in tbe terminal

// getting-started.js

const mongoose = require('mongoose');

main().catch(err => console.log(err));

async function main() {
  await mongoose.connect('mongodb://localhost:27017/test'); // in place of "test" there must be the name of the Database
}

6. Using Mongoose in NodeJs

// getting-started.js

const mongoose = require('mongoose');

main().catch(err => console.log(err));

async function main() {
  await mongoose.connect('mongodb://localhost:27017/shark');
  console.log('connected')
}

const kittySchema = new mongoose.Schema({
  name: String
});

kittySchema.methods.speak = function speak() {
  const greeting = this.name
    ? "Meow name is " + this.name
    : "I don't have a name";
  console.log(greeting);
};

const Kitten = mongoose.model('shark_kitten', kittySchema);
// const Kitten2 = mongoose.model('shark_kitten2', kittySchema);

const shark_kitten = new Kitten({ name: 'shark_kitten' });
const shark_kitten2 = new Kitten({ name: 'shark_kitten2' });

console.log(shark_kitten.name); // 'shark_kitten'

shark_kitten.save(function (err, shark_kitten) {
  if (err) return console.error(err);
  shark_kitten.speak();
});

shark_kitten2.save(function (err, shark_kitten2) {
  if (err) return console.error(err);
  shark_kitten2.speak();
});

Kitten.find({ name: 'shark_kitten' }, function (err, kit){
  if (err) return console.error(err);
  console.log(kit)
});
